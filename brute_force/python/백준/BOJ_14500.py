# 직접 19가지 테트로미노를 설정
blocks = (
    ((0,1), (0,2), (0,3)),
    ((1,0), (2,0), (3,0)),
    ((1,0), (1,1), (1,2)),
    ((0,1), (1,0), (2,0)),
    ((0,1), (0,2), (1,2)),
    ((1,0), (2,0), (2,-1)),
    ((0,1), (0,2), (-1,2)),
    ((1,0), (2,0), (2,1)),
    ((0,1), (0,2), (1,0)),
    ((0,1), (1,1), (2,1)),
    ((0,1), (1,0), (1,1)),
    ((0,1), (-1,1), (-1,2)),
    ((1,0), (1,1), (2,1)),
    ((0,1), (1,1), (1,2)),
    ((1,0), (1,-1), (2,-1)),
    ((0,1), (0,2), (-1,1)),
    ((0,1), (0,2), (1,1)),
    ((1,0), (2,0), (1,1)),
    ((1,0), (2,0), (1,-1)),
)

n,m = map(int,input().split())
a = [list(map(int,input().split())) for _ in range(n)]

def in_range(x, y):
    if 0 <= x < n and 0 <= y < m:
        return True
    else :
        return False

# 갱신할 최댓값
ans = 0


for i in range(n):
    for j in range(m):
        # i, j 는 순회 기준 좌표
        # 테트로미노 경우의 수 순회
        for block in blocks:
            # ok = True : 테트로미노를 다 만들었다.
            # 좌표 유효성 검사를 충족 못해서 테트로미노를 만들다가 중단하는 경우를 체크해주기 위한 변수
            ok = True
            # 기준 좌표를 s에 설정
            s = a[i][j]
            for dx, dy in block:
                x, y = i+dx, j+dy
                # 해당 x, y 가 좌표 유효성 검사를 충족한다면
                if in_range(x, y):
                    # s에 x,y 좌표 값을 추가
                    s += a[x][y]
                else:
                    # 유효성 검사를 만족 못했다면 False => 만들다 만 것들은 거를 수 있게
                    ok = False
                    break
            # 테트로미노를 다 만들었고 기존 최댓값보다 값이 크다면 최댓값 갱신
            if ok and ans < s:
                ans = s

print(ans)